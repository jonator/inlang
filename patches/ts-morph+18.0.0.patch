diff --git a/node_modules/ts-morph/dist/ts-morph.js b/node_modules/ts-morph/dist/ts-morph.js
index b91f4c8..5be33c4 100644
--- a/node_modules/ts-morph/dist/ts-morph.js
+++ b/node_modules/ts-morph/dist/ts-morph.js
@@ -3,7 +3,7 @@
 var common = require('@ts-morph/common');
 var CodeBlockWriter = require('code-block-writer');
 
-function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }
+function _interopDefaultCompat(e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }
 
 var CodeBlockWriter__default = /*#__PURE__*/_interopDefaultCompat(CodeBlockWriter);
 
@@ -3740,7 +3740,7 @@ class Node {
             let lastPos = replaceRange[0];
             for (const transform of transformations) {
                 finalText += fileText.substring(lastPos, transform.start);
-                finalText += printer.printNode(common.ts.EmitHint.Unspecified, transform.compilerNode, compilerSourceFile);
+                finalText += printer.printNode(common.ts.EmitHint.Unspecified, transform.compilerNode, transform.compilerNode.getSourceFile());
                 lastPos = transform.end;
             }
             finalText += fileText.substring(lastPos, replaceRange[1]);
@@ -17052,9 +17052,9 @@ class FileTextChanges {
         this._compilerObject = compilerObject;
         const file = context.compilerFactory
             .addOrGetSourceFileFromFilePath(context.fileSystemWrapper.getStandardizedAbsolutePath(compilerObject.fileName), {
-            markInProject: false,
-            scriptKind: undefined,
-        });
+                markInProject: false,
+                scriptKind: undefined,
+            });
         this._existingFileExists = file != null;
         if (!compilerObject.isNewFile)
             this._sourceFile = file;
@@ -17152,9 +17152,9 @@ class DocumentSpan {
         this._compilerObject = compilerObject;
         this._sourceFile = this._context.compilerFactory
             .addOrGetSourceFileFromFilePath(context.fileSystemWrapper.getStandardizedAbsolutePath(this.compilerObject.fileName), {
-            markInProject: false,
-            scriptKind: undefined,
-        });
+                markInProject: false,
+                scriptKind: undefined,
+            });
         this._sourceFile._doActionPreNextModification(() => this.getNode());
     }
     get compilerObject() {
